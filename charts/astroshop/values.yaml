default:
  postgresql_user: postgres
  postgresql_db: postgres
  postgresql_password: example
  postgresql_host: product-db
  postgresql_port: 5432

components:
  dt-credentials:
    # when enabled it requires the `tenantEndpoint` and `tenantToken` values to be set
    # when disabled make sure to create a `dt-credentials` secret with
    # DT_ENDPOINT and DT_API_TOKEN values
    enabled: false
    # tenantEndpoint: https://wkf10640.live.dynatrace.com/api/v2/otlp # example endpoint
    # tenantToken: dt0c01.abc.xxx
  ingress:
    enabled: true
    # used for setting host in ingress, the url set in loadgen should match this
    # host: ""
    # the ip whitelist used for the ingress
    # allows for limitting the allowed ips, leave empty to not add the restriction
    # two separate fields are given to allow for more complicated setups
    ipWhitelist:
      base: []
      extra: []
  product-db:
    enabled: true
    image: "postgres:15.1"
    useDefault:
      env: false
    replicas: 1
    ports:
      - protocol: TCP
        port: 5432
        appProtocol: tcp
        targetPort: 5432
        name: sql

opentelemetry-demo:
  default:
    image:
      repository: europe-docker.pkg.dev/dynatrace-demoability/docker/astroshop-rds-and-payment-merge
      tag: ffc8937
  components:
    accounting:
      podAnnotations:
        metadata.dynatrace.com/process.technology: ".NET"
      envOverrides:
        - name: DT_LOGLEVELCON
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_DOTNET_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
          value: "false" # Avoid duplicate spans from OA and Otel -  https://opentelemetry.io/docs/zero-code/net/instrumentations/
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    ad:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "Java"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_JAVA_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: JAVA_TOOL_OPTIONS
          value: "" # '-javaagent:/usr/src/app/opentelemetry-javaagent.jar' # - Duplicate spans from OA and Otel are avoided automatically - https://docs.dynatrace.com/docs/shortlink/opentelemetry-oneagent#java-span-dropping
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp
      resources:
        limits:
          memory: 512Mi
    cart:
      podAnnotations:
        metadata.dynatrace.com/process.technology: ".NET"
        dapr.io/enabled: "true"
        dapr.io/app-id: "cart"
        dapr.io/app-port: "8080"
        dapr.io/enable-api-logging: "true"
        dapr.io/config: "app-config"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_DOTNET_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
          value: "false" # Avoid duplicate spans from OA and Otel -  https://opentelemetry.io/docs/zero-code/net/instrumentations/
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    checkout:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "go"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_GO_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    currency:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "cpp"
    email:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "ruby"
    flagd:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "flagd"
      resources:
        limits:
          memory: 300Mi
    fraud-detection:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "Java"
      envOverrides:
        - name: JAVA_TOOL_OPTIONS
          value: "-javaagent:/app/opentelemetry-javaagent.jar" # '-javaagent:/app/opentelemetry-javaagent.jar' # - Duplicate spans from OA and Otel are avoided automatically - https://docs.dynatrace.com/docs/shortlink/opentelemetry-oneagent#java-span-dropping
    frontend:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "nodejs"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_NODEJS_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
        - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS # https://github.com/open-telemetry/opentelemetry-js-contrib/blob/167dced09de0d2104561542b4f83047fa656505f/metapackages/auto-instrumentations-node/package.json#L51
          value: "" # other examples - http,grpc,dns,net
        - name: NODE_OPTIONS
          value: "" # - do not instrument at all with things like '-r ./Instrumentation.js' Avoid duplicate spans from OA and Otel - https://opentelemetry.io/docs/zero-code/js/
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT # This is used on the client-side for sending traces to the backend
          value: ""
        - name: NEXT_OTEL_VERBOSE
          value: "0" # This expects users to use `kubectl port-forward ...`
      resources:
        limits:
          memory: 512Mi
    image-provider:
      podAnnotations:
        dynatrace.com/inject: "false"
        metrics.dynatrace.com/port: "9113" # https://www.dynatrace.com/news/blog/simplify-observability-for-all-your-custom-metrics-part-4-prometheus/
        metrics.dynatrace.com/scrape: "true"
        metadata.dynatrace.com/process.technology: "nginx"
      sidecarContainers:
        - name: nginx-exporter
          imageOverride:
            repository: "nginx/nginx-prometheus-exporter"
            tag: "1.3.0"
          command:
            [
              "/usr/bin/nginx-prometheus-exporter",
              "--web.listen-address=:9113",
              "--nginx.scrape-uri=http://localhost:8081/nginx/status",
            ]
          service:
            port: 9113
          useDefault:
            env: false
    load-generator:
      replicas: 2
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "python"
      envOverrides:
        - name: LOCUST_HOST
          value: http://frontend-proxy:8080
        - name: LOCUST_USERS
          value: "2"
        - name: LOCUST_HEADLESS
          value: "true"
      resources:
        requests:
          memory: 2Gi
        limits:
          memory: 2Gi
    payment:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "nodejs"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_NODEJS_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
        - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS # https://github.com/open-telemetry/opentelemetry-js-contrib/blob/167dced09de0d2104561542b4f83047fa656505f/metapackages/auto-instrumentations-node/package.json#L51
          value: "" # other examples - http,grpc,dns,net
        - name: NODE_OPTIONS
          value: "" # - do not instrument at all with things like '-r ./Instrumentation.js' Avoid duplicate spans from OA and Otel - https://opentelemetry.io/docs/zero-code/js/
      resources:
        limits:
          memory: 512Mi

    product-catalog:
      # image: 'hrexed/demo:latest-product-catalog'
      podAnnotations:
        metadata.dynatrace.com/process.technology: "go"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_GO_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_host
        - name: POSTGRES_PORT
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_port
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_user        
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres_db
      resources:
        limits:
          memory: 512Mi
    quote:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "PHP"
      envOverrides:
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_PHP_DISABLED_INSTRUMENTATIONS
          value: "" # Disable 'all','slim,psr15,psr18' instrumentations
    recommendation:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "python"
    shipping:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "rust"
    kafka:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "kafka"
      envOverrides:
        - name: KAFKA_OPTS
          value: "-Dotel.jmx.target.system=kafka-broker"
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_JAVA_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
      resources:
        limits:
          memory: 1024Mi
    valkey-cart:
      ports:
        - name: valkey-cart
          value: 6379
      podAnnotations:
        dynatrace.com/inject: "false"
        metrics.dynatrace.com/port: "9121" # https://www.dynatrace.com/news/blog/simplify-observability-for-all-your-custom-metrics-part-4-prometheus/
        metrics.dynatrace.com/scrape: "true"
        metadata.dynatrace.com/process.technology: "redis"
      sidecarContainers:
        - name: valkey-exporter
          command: ["/redis_exporter", "--web.listen-address=0.0.0.0:9121"]
          imageOverride:
            repository: "oliver006/redis_exporter"
            tag: "v1.14.0"
          service:
            port: 9121
          useDefault:
            env: false

  opensearch:
    podAnnotations:
      metadata.dynatrace.com/process.technology: "elasticsearch"
    enabled: true
    envOverrides:
      - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
        value: "" # info
      - name: DT_LOGCON_PROC
        value: "" # stdout
      - name: DT_LOGGING_DESTINATION
        value: "" # stdout
      - name: DT_LOGGING_JAVA_FLAGS
        value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
  opentelemetry-collector:
    nameOverride: "otel-gateway-collector"
    mode: "deployment"
    podAnnotations:
      dynatrace.com/inject: "false"
    resources:
      limits:
        memory: 512Mi
    config:
      exporters:
        debug:
          verbosity: basic
          sampling_initial: 5
          sampling_thereafter: 2000
        otlphttp:
          endpoint: "${env:DT_ENDPOINT}"
          headers:
            Authorization: "Api-Token ${env:DT_API_TOKEN}"
      extensions:
        health_check:
          endpoint: "0.0.0.0:13133"
          path: "/"
      processors:
        cumulativetodelta: {}
        memory_limiter:
          check_interval: 1s
          limit_percentage: 75
          spike_limit_percentage: 15
        batch:
          send_batch_size: 10000
          timeout: 10s
        resourcedetection/aks:
          detectors: [env, aks]
          timeout: 2s
          override: false
        k8sattributes:
          extract:
            metadata:
              - k8s.pod.name
              - k8s.pod.uid
              - k8s.deployment.name
              - k8s.statefulset.name
              - k8s.daemonset.name
              - k8s.cronjob.name
              - k8s.namespace.name
              - k8s.node.name
              - k8s.cluster.uid
          pod_association:
            - sources:
                - from: resource_attribute
                  name: k8s.pod.name
                - from: resource_attribute
                  name: k8s.namespace.name
            - sources:
                - from: resource_attribute
                  name: k8s.pod.ip
            - sources:
                - from: resource_attribute
                  name: k8s.pod.uid
            - sources:
                - from: connection
        filter/ottl:
          error_mode: ignore
          traces:
            span:
              - |
                resource.attributes["service.name"] == "checkout" or
                resource.attributes["service.name"] == "frontend" or
                resource.attributes["service.name"] == "payment" or
                resource.attributes["service.name"] == "product-catalog" or
                IsMatch(resource.attributes["host.name"], ".*product-catalog.*")
            spanevent:
              - |
                resource.attributes["service.name"] == "checkout" or
                resource.attributes["service.name"] == "frontend" or
                resource.attributes["service.name"] == "payment" or
                resource.attributes["service.name"] == "product-catalog" or
                IsMatch(resource.attributes["host.name"], ".*product-catalog.*")
          metrics:
            metric:
              - |
                resource.attributes["service.name"] == "checkout" or
                resource.attributes["service.name"] == "frontend" or
                resource.attributes["service.name"] == "payment" or
                resource.attributes["service.name"] == "product-catalog" or
                IsMatch(resource.attributes["host.name"], ".*product-catalog.*")
          logs:
            log_record:
              - |
                resource.attributes["service.name"] == "checkout" or
                resource.attributes["service.name"] == "frontend" or
                resource.attributes["service.name"] == "payment" or
                resource.attributes["service.name"] == "product-catalog" or
                IsMatch(resource.attributes["host.name"], ".*product-catalog.*")
        transform:
          error_mode: ignore
          trace_statements:
            - context: resource
              statements:
                - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])
            - context: span
              statements:
                # - set(name, "NO_NAME") where name == ""
                # could be removed when https://github.com/vercel/next.js/pull/64852 is fixed upstream
                - replace_pattern(name, "\\?.*", "")
                - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
          log_statements:
            - context: resource
              statements:
                - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])
          metric_statements:
            - context: resource
              statements:
                - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
                - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
                - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])
            # - context: metric
            #   statements:
            #     - set(attributes["span.name"], "NO_NAME") where IsString(attributes["span.name"]) and attributes["span.name"] == ""
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: ${env:MY_POD_IP}:4318
        hostmetrics:
          root_path: /hostfs
          scrapers:
            cpu:
              metrics:
                system.cpu.utilization:
                  enabled: true
            disk: {}
            load: {}
            filesystem:
              exclude_mount_points:
                mount_points:
                  - /dev/*
                  - /proc/*
                  - /sys/*
                  - /run/k3s/containerd/*
                  - /var/lib/docker/*
                  - /var/lib/kubelet/*
                  - /snap/*
                match_type: regexp
              exclude_fs_types:
                fs_types:
                  - autofs
                  - binfmt_misc
                  - bpf
                  - cgroup2
                  - configfs
                  - debugfs
                  - devpts
                  - devtmpfs
                  - fusectl
                  - hugetlbfs
                  - iso9660
                  - mqueue
                  - nsfs
                  - overlay
                  - proc
                  - procfs
                  - pstore
                  - rpc_pipefs
                  - securityfs
                  - selinuxfs
                  - squashfs
                  - sysfs
                  - tracefs
                match_type: strict
            memory:
              metrics:
                system.memory.utilization:
                  enabled: true
            network: {}
            paging: {}
            processes: {}
            process:
              mute_process_exe_error: true
              mute_process_io_error: true
              mute_process_user_error: true
      service:
        pipelines:
          traces:
            receivers: [otlp]
            processors:
              [
                memory_limiter,
                resourcedetection/aks,
                k8sattributes,
                filter/ottl,
                transform,
                batch,
              ]
            exporters: [otlphttp, spanmetrics, debug] # debug
          metrics:
            receivers: [otlp, spanmetrics] # hostmetrics - permission denied
            processors:
              [
                memory_limiter,
                cumulativetodelta,
                resourcedetection/aks,
                k8sattributes,
                filter/ottl,
                transform,
                batch,
              ]
            exporters: [otlphttp, debug] # debug
          logs:
            receivers: [otlp]
            processors:
              [
                memory_limiter,
                resourcedetection/aks,
                k8sattributes,
                filter/ottl,
                transform,
                batch,
              ]
            exporters: [otlphttp, debug] # debug
        extensions:
          - health_check
        telemetry:
          metrics:
            address: ${env:MY_POD_IP}:8888
            level: detailed
            readers:
              - periodic:
                  exporter:
                    otlp:
                      endpoint: 127.0.0.1:4317
                      protocol: grpc
                  interval: 10000
                  timeout: 5000
    serviceAccount:
      create: true
      name: "astroshop-otel-gateway-collector"
    extraEnvsFrom:
      - secretRef:
          name: dt-credentials
    extraVolumes:
      - name: hostfs
        hostPath:
          path: /
    # This also supports template content, which will eventually be converted to yaml.
    extraVolumeMounts:
      - mountPath: /hostfs
        name: hostfs
        readOnly: true
    ports:
      jaeger-compact:
        enabled: false
      jaeger-thrift:
        enabled: false
      jaeger-grpc:
        enabled: false
      zipkin:
        enabled: false
      metrics:
        enabled: false
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 5
      httpGet:
        port: 13133
        path: "/"
    readinessProbe:
      initialDelaySeconds: 15
      periodSeconds: 5
      timeoutSeconds: 5
      httpGet:
        port: 13133
        path: "/"
  jaeger:
    enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

opentelemetry-demo:
  default:
    image:
      repository: europe-docker.pkg.dev/dynatrace-demoability/docker/astroshop
      tag: e6d80b1
  components:
    accounting:
      podAnnotations:
        metadata.dynatrace.com/process.technology: ".NET"
      envOverrides:
        - name: DT_LOGLEVELCON
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_DOTNET_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
          value: "false" # Avoid duplicate spans from OA and Otel -  https://opentelemetry.io/docs/zero-code/net/instrumentations/
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    ad:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "Java"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_JAVA_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: JAVA_TOOL_OPTIONS
          value: "" # '-javaagent:/usr/src/app/opentelemetry-javaagent.jar' # - Duplicate spans from OA and Otel are avoided automatically - https://docs.dynatrace.com/docs/shortlink/opentelemetry-oneagent#java-span-dropping
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp
      resources:
        limits:
          memory: 512Mi
    cart:
      podAnnotations:
        metadata.dynatrace.com/process.technology: ".NET"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_DOTNET_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_DOTNET_AUTO_INSTRUMENTATION_ENABLED
          value: "false" # Avoid duplicate spans from OA and Otel -  https://opentelemetry.io/docs/zero-code/net/instrumentations/
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    checkout:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "go"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_GO_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
      resources:
        limits:
          memory: 512Mi
    currency:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "cpp"
    email:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "ruby"
    flagd:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "flagd"
      resources:
        limits:
          memory: 300Mi
    fraud-detection:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "Java"
      envOverrides:
        - name: JAVA_TOOL_OPTIONS
          value: "-javaagent:/app/opentelemetry-javaagent.jar" # '-javaagent:/app/opentelemetry-javaagent.jar' # - Duplicate spans from OA and Otel are avoided automatically - https://docs.dynatrace.com/docs/shortlink/opentelemetry-oneagent#java-span-dropping
    frontend:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "nodejs"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_NODEJS_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
        - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS # https://github.com/open-telemetry/opentelemetry-js-contrib/blob/167dced09de0d2104561542b4f83047fa656505f/metapackages/auto-instrumentations-node/package.json#L51
          value: "" # other examples - http,grpc,dns,net
        - name: NODE_OPTIONS
          value: "" # - do not instrument at all with things like '-r ./Instrumentation.js' Avoid duplicate spans from OA and Otel - https://opentelemetry.io/docs/zero-code/js/
        - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT # This is used on the client-side for sending traces to the backend
          value: ""
        - name: NEXT_OTEL_VERBOSE
          value: "0" # This expects users to use `kubectl port-forward ...`
      resources:
        limits:
          memory: 512Mi
    image-provider:
      podAnnotations:
        dynatrace.com/inject: "false"
        metrics.dynatrace.com/port: "9113" # https://www.dynatrace.com/news/blog/simplify-observability-for-all-your-custom-metrics-part-4-prometheus/
        metrics.dynatrace.com/scrape: "true"
        metadata.dynatrace.com/process.technology: "nginx"
      sidecarContainers:
        - name: nginx-exporter
          imageOverride:
            repository: "nginx/nginx-prometheus-exporter"
            tag: "1.3.0"
          command:
            [
              "/usr/bin/nginx-prometheus-exporter",
              "--web.listen-address=:9113",
              "--nginx.scrape-uri=http://localhost:8081/nginx/status",
            ]
          service:
            port: 9113
          useDefault:
            env: false
    load-generator:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "python"
      envOverrides:
        - name: LOCUST_USERS
          value: "2"
        - name: LOCUST_HEADLESS
          value: "true"
      # additionalVolumes:
      #   - name: tmp
      #     mountPath: /tmp
      #     emptyDir:
      #       medium: Memory
      # mountedEmptyDirs:
      #   - mountPath: /tmp
      #     name: tmp
      #     emptyDir:
      #       medium: Memory
    payment:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "nodejs"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_NODEJS_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
        - name: OTEL_TRACES_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_LOGS_EXPORTER
          value: "none" # 'console', 'none', 'otlp'
        - name: OTEL_METRICS_EXPORTER
          value: "console,otlp" # 'console', 'none', 'otlp'
        - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS # https://github.com/open-telemetry/opentelemetry-js-contrib/blob/167dced09de0d2104561542b4f83047fa656505f/metapackages/auto-instrumentations-node/package.json#L51
          value: "" # other examples - http,grpc,dns,net
        - name: NODE_OPTIONS
          value: "" # - do not instrument at all with things like '-r ./Instrumentation.js' Avoid duplicate spans from OA and Otel - https://opentelemetry.io/docs/zero-code/js/
      resources:
        limits:
          memory: 512Mi
    product-catalog:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "go"
      envOverrides:
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_GO_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
      # additionalVolumes:
      #   - name: volume
      #     persistentVolumeClaim:
      #       claimName: product-catalog-storage
      resources:
        limits:
          memory: 512Mi
    quote:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "PHP"
      envOverrides:
        - name: OTEL_PHP_AUTOLOAD_ENABLED
          value: "true"
        - name: OTEL_PHP_DISABLED_INSTRUMENTATIONS
          value: "" # Disable 'all','slim,psr15,psr18' instrumentations
    recommendation:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "python"
    shipping:
      podAnnotations:
        dynatrace.com/inject: "false"
        metadata.dynatrace.com/process.technology: "rust"
    kafka:
      podAnnotations:
        metadata.dynatrace.com/process.technology: "kafka"
      envOverrides:
        - name: KAFKA_OPTS
          value: "-Dotel.jmx.target.system=kafka-broker"
        - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
          value: "" # info
        - name: DT_LOGCON_PROC
          value: "" # stdout
        - name: DT_LOGGING_DESTINATION
          value: "" # stdout
        - name: DT_LOGGING_JAVA_FLAGS
          value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
      resources:
        limits:
          memory: 1024Mi
    valkey-cart:
      podAnnotations:
        dynatrace.com/inject: "false"
        metrics.dynatrace.com/port: "9121" # https://www.dynatrace.com/news/blog/simplify-observability-for-all-your-custom-metrics-part-4-prometheus/
        metrics.dynatrace.com/scrape: "true"
        metadata.dynatrace.com/process.technology: "redis"
      sidecarContainers:
        - name: valkey-exporter
          command: ["/redis_exporter", "--web.listen-address=0.0.0.0:9121"]
          imageOverride:
            repository: "oliver006/redis_exporter"
            tag: "v1.14.0"
          service:
            port: 9121
          useDefault:
            env: false
  opensearch:
    podAnnotations:
      metadata.dynatrace.com/process.technology: "elasticsearch"
    enabled: true
    envOverrides:
      - name: DT_LOGLEVELCON # https://www.dynatrace.com/support/help/shortlink/agent-logging
        value: "" # info
      - name: DT_LOGCON_PROC
        value: "" # stdout
      - name: DT_LOGGING_DESTINATION
        value: "" # stdout
      - name: DT_LOGGING_JAVA_FLAGS
        value: "" # Exporter=true,SpanProcessor=true,Propagator=true,Core=true
  opentelemetry-collector:
    podAnnotations:
      dynatrace.com/inject: "false"
    resources:
      limits:
        memory: 512Mi
  jaeger:
    enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false
